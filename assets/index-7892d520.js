import{z as m,_ as p}from"./index-10e24cf3.js";/* empty css              */import{r as D,h as S,j as g,B as C,I as T,m as d,R as l,u as w,K as O}from"./vue-e0e31f72.js";import{e as P}from"./arco-38a32e5c.js";const N={READ_COILS:1,READ_DISCRETE_INPUTS:2,READ_HOLDING_REGISTERS:3,READ_INPUT_REGISTERS:4,WRITE_SINGLE_COIL:5,WRITE_SINGLE_REGISTER:6,WRITE_MULTIPLE_COILS:15,WRITE_MULTIPLE_REGISTERS:16},b={modbusFunctionType:N},{modbusFunctionType:c}=b;class I extends Error{constructor(x){super(x)}}class v{constructor({handleFunc:x,onSuccess:e=()=>{},onError:t=()=>{},maxRetries:s=3}){this.queue=[],this.isProcessing=!1,this.handleFunc=x,this.onSuccess=e,this.onError=t,this.maxRetries=s}push(x){this.queue.push(x),this.isProcessing||this.execute()}shift(){return this.queue.shift()}getLength(){return this.queue.length}async execute(){if(this.getLength()===0){this.isProcessing=!1;return}this.isProcessing=!0;const x=this.shift();try{const e=await this.retryHandleFunc(x,this.maxRetries);this.onSuccess(e)}catch(e){this.onError(e)}this.execute()}async retryHandleFunc(x,e){try{return await this.handleFunc(x)}catch(t){if(e>0)return this.retryHandleFunc(x,e-1);throw t}}}class G{constructor(x){const{contrastParams:e,onMessage:t,onConnect:s,onDisconnect:n,onFail:o}=x;this.contrastParams=e||{},this.onMessage=t||function(){},this.onConnect=s||function(){},this.onDisconnect=n||function(){},this.onFail=o||function(){},this.modbusFunctionType=c,this.serialPortReader=null,this.serialPortWriter=null,this.timeOut=800}async connect(){try{if("serial"in navigator){const x=await navigator.serial.requestPort();await x.open({baudRate:9600,parity:"odd"}),this.serialPortReader=x.readable.getReader(),this.serialPortWriter=x.writable.getWriter(),this.onConnect({label:"连接成功"})}}catch{this.onFail({label:"连接失败"})}}async send(x){const{slave:e,function_code:t,starting_address:s,quantity_of_x:n,output_value:o}=this._convertSendParams(x);try{this._validateParams(e,s,n,t,o);const i=this._buildRequest(t,e,s,n,o),r=this._getExpectedLength(t,n);await this.serialPortWriter.write(Uint8Array.from(i));const a=await this._readResponse(r);return this._handleResponse(a,t,e,n,r)}catch(i){return i}}_convertSendParams(x){const{slave:e=1,function_code:t,starting_address:s,quantity_of_x:n=1,output_value:o=[]}=x;return{slave:Number(e),function_code:Number(t),starting_address:Number(s),quantity_of_x:Number(n),output_value:o.map(Number)}}_validateParams(x,e,t,s,n){if(x<0||x>255)throw new I(`MODBUS_INVALID_ARGUMENT_ERROR: Invalid slave ${x}`);if(e<0||e>65535)throw new I(`MODBUS_INVALID_ARGUMENT_ERROR: Invalid starting_address ${e}`);if(t<1||t>255)throw new I(`MODBUS_INVALID_ARGUMENT_ERROR: Invalid quantity_of_x ${t}`);if((s===c.WRITE_MULTIPLE_COILS||s===c.WRITE_MULTIPLE_REGISTERS)&&(n==null||n.length!==t))throw new I(`MODBUS_INVALID_ARGUMENT_ERROR: Invalid quantity_of_x ${t} differs from output_value.length ${n.length||0}`)}_isReadFunction(x){return[c.READ_COILS,c.READ_DISCRETE_INPUTS,c.READ_INPUT_REGISTERS,c.READ_HOLDING_REGISTERS].includes(x)}_buildRequest(x,e,t,s,n){const o=[e&255,x&255,t>>8&255,t&255,s>>8&255,s&255];x===c.WRITE_SINGLE_COIL||x==c.WRITE_SINGLE_REGISTER?(o.pop(),o.pop(),x==c.WRITE_SINGLE_COIL&&n[0]!=0&&(n[0]=65280),o.push(n>>8&255),o.push(n&255)):x===c.WRITE_MULTIPLE_COILS?this._addWriteMultipleCoils(o,s,n):x===c.WRITE_MULTIPLE_REGISTERS&&(o.push(2*s&255),n.forEach(r=>{o.push(r>>8&255),o.push(r&255)}));const i=this._crc16Compute(o);return o.push(i&255,i>>8&255),o}_addWriteMultipleCoils(x,e,t){const s=Math.ceil(e/8);x.push(s&255);for(let n=0;n<s;n++){let o=0;for(let i=0;i<8&&n*8+i<e;i++)o|=(t[n*8+i]?1:0)<<i;x.push(o&255)}}_getExpectedLength(x,e){return x===c.READ_COILS||x===c.READ_DISCRETE_INPUTS?Math.ceil(e/8)+5:x===c.READ_INPUT_REGISTERS||x===c.READ_HOLDING_REGISTERS?2*e+5:(x===c.WRITE_SINGLE_COIL||x===c.WRITE_SINGLE_REGISTER,8)}async _readResponse(x){let e=[];const t=Date.now();for(;Date.now()<t+this.timeOut;)try{const{value:s}=await this._waitWithTimeout(this.serialPortReader.read(),this.timeOut);if(e=e.concat(Array.from(s)),e.length>=x)break}catch(s){return s}return e}_handleResponse(x,e,t,s,n){const o=x.length-5;if(x.length===0)throw new I(`MODBUS_TIMEOUT_ERROR: Timeout of ${this.timeOut} ms.`);if(x.length<n)throw new I("MODBUS_INVALID_RESPONSE_ERROR：Response length is invalid "+x.length);const i=x.shift();if(+i!=+t)throw new I(`MODBUS_INVALID_RESPONSE_ERROR: Response slave ${i} is different from request slave ${t}`);if(x.shift()>128)throw new I(`MODBUS_ERROR_CODE: ${x.shift()}`);return this._extractData({responseBytes:x,function_code:e,quantity_of_x:s,actualLength:o})}_extractData(x){const{responseBytes:e,function_code:t,quantity_of_x:s,actualLength:n}=x,o=this._isReadFunction(t);let i=0;if(o&&(i=e.shift(),i!=n))throw new I("MODBUS_INVALID_RESPONSE_ERROR：Byte count is "+i+" while actual number of bytes is "+n);let r=[];if([c.READ_COILS,c.READ_DISCRETE_INPUTS].includes(t)){const a=[];for(let _=0;_<i;_++){const u=e.shift()&255;for(let h=0;h<8;h++)a.push(u>>h&1)}r=a.splice(0,s)}else if([c.READ_INPUT_REGISTERS,c.READ_HOLDING_REGISTERS].includes(t))for(let a=0;a<s;a++){const _=e.shift()&255,u=e.shift()&255;r.push(_<<8|u)}else if([c.WRITE_SINGLE_COIL,c.WRITE_SINGLE_REGISTER,c.WRITE_MULTIPLE_COILS,c.WRITE_MULTIPLE_REGISTERS].includes(t)){const a=e.shift()&255,_=e.shift()&255;r.push(a<<8|_)}return r}async _waitWithTimeout(x,e,t="timeout"){let s;const n=new Promise((o,i)=>{s=setTimeout(()=>i(t),e)});return Promise.race([n,x]).finally(()=>clearTimeout(s))}_crc16Compute(x,e=0,t=x.length,s=65535){const n=[0,193,129,64,1,192,128,65,1,192,128,65,0,193,129,64,1,192,128,65,0,193,129,64,0,193,129,64,1,192,128,65,1,192,128,65,0,193,129,64,0,193,129,64,1,192,128,65,0,193,129,64,1,192,128,65,1,192,128,65,0,193,129,64,1,192,128,65,0,193,129,64,0,193,129,64,1,192,128,65,0,193,129,64,1,192,128,65,1,192,128,65,0,193,129,64,0,193,129,64,1,192,128,65,1,192,128,65,0,193,129,64,1,192,128,65,0,193,129,64,0,193,129,64,1,192,128,65,1,192,128,65,0,193,129,64,0,193,129,64,1,192,128,65,0,193,129,64,1,192,128,65,1,192,128,65,0,193,129,64,0,193,129,64,1,192,128,65,1,192,128,65,0,193,129,64,1,192,128,65,0,193,129,64,0,193,129,64,1,192,128,65,0,193,129,64,1,192,128,65,1,192,128,65,0,193,129,64,1,192,128,65,0,193,129,64,0,193,129,64,1,192,128,65,1,192,128,65,0,193,129,64,0,193,129,64,1,192,128,65,0,193,129,64,1,192,128,65,1,192,128,65,0,193,129,64],o=[0,192,193,1,195,3,2,194,198,6,7,199,5,197,196,4,204,12,13,205,15,207,206,14,10,202,203,11,201,9,8,200,216,24,25,217,27,219,218,26,30,222,223,31,221,29,28,220,20,212,213,21,215,23,22,214,210,18,19,211,17,209,208,16,240,48,49,241,51,243,242,50,54,246,247,55,245,53,52,244,60,252,253,61,255,63,62,254,250,58,59,251,57,249,248,56,40,232,233,41,235,43,42,234,238,46,47,239,45,237,236,44,228,36,37,229,39,231,230,38,34,226,227,35,225,33,32,224,160,96,97,161,99,163,162,98,102,166,167,103,165,101,100,164,108,172,173,109,175,111,110,174,170,106,107,171,105,169,168,104,120,184,185,121,187,123,122,186,190,126,127,191,125,189,188,124,180,116,117,181,119,183,182,118,114,178,179,115,177,113,112,176,80,144,145,81,147,83,82,146,150,86,87,151,85,149,148,84,156,92,93,157,95,159,158,94,90,154,155,91,153,89,88,152,136,72,73,137,75,139,138,74,78,142,143,79,141,77,76,140,68,132,133,69,135,71,70,134,130,66,67,131,65,129,128,64];let i=(s&65280)>>8,r=s&255,a;for(let u=0;u<t;++u)a=(r^x[e+u])&255,r=i^n[a],i=o[a];return(i&255)<<8|r&255&65535}}const y={SlSerialPort:G,Queue:v};function M(){const{SlSerialPort:E,Queue:x}=y,e=D({status:"",text:"",data:{success:{value:0,label:"连接成功"},fail:{value:1,label:"连接失败"},disconnect:{value:2,label:"断开连接"}}}),t=new E({onConnect:()=>{o(e.value.data.success.value)},onDisconnect:()=>{o(e.value.data.disconnect.value)},onFail:()=>{o(e.value.data.fail.value)}}),s=new x({handleFunc:async r=>new Promise((a,_)=>{(async()=>{try{const u=await t.send(r.item),h={status:m(u),errorMessage:"",data:u,params:r};h.status?a(h):(h.errorMessage=u.toString(),_(h))}catch(u){_({errorMessage:u.message,params:r})}})()}),onSuccess:r=>{},onError:r=>{},maxRetries:0});function n(){t.connect()}function o(r){const a=e.value.data;e.value.status=r;for(const _ in a)if(Object.hasOwnProperty.call(a,_)){const u=a[_];u.value===r&&(e.value.text=u.label)}}function i(r){s.push({item:{slave:r[0],function_code:r[1],starting_address:r[2],quantity_of_x:r.length>3?r[3]:1,output_value:r.length>4?r[4]:[]}})}return{serialPortStatus:e,serialPortConnect:n,serialPortSendMsg:i}}function U(E){const{modbusFunctionType:x}=b;function e(){E([1,x.READ_COILS,0,3])}function t(){E([1,x.READ_DISCRETE_INPUTS,0,2])}function s(){E([1,x.READ_HOLDING_REGISTERS,0,2])}function n(){E([1,x.READ_INPUT_REGISTERS,0,2])}function o(){E([1,x.WRITE_SINGLE_COIL,1,1,[0]])}function i(){E([1,x.WRITE_SINGLE_REGISTER,0,1,[167]])}function r(){E([1,x.WRITE_MULTIPLE_COILS,0,2,[0,1]])}function a(){E([1,x.WRITE_MULTIPLE_REGISTERS,0,2,[16,32]])}return{readCoils:e,readDiscreteInputs:t,readHoldingRegisters:s,readInputRegisters:n,writeSingleCoil:o,writeSingleRegister:i,writeMultipleCoils:r,writeMultipleRegisters:a}}const A={class:"sl-main-content"},W={class:"flex"},F={key:0},k={class:"card-detail"},q={__name:"index",setup(E){const{serialPortStatus:x,serialPortConnect:e,serialPortSendMsg:t}=M(),{readCoils:s,readDiscreteInputs:n,readHoldingRegisters:o,readInputRegisters:i,writeSingleCoil:r,writeSingleRegister:a,writeMultipleCoils:_,writeMultipleRegisters:u}=U(t);return(h,f)=>{const L=P;return S(),g("div",A,[C(L,{"dis-hover":""},{title:T(()=>[d("div",W,[l(x).status!==0?(S(),g("div",F,[d("button",{type:"primary",onClick:f[0]||(f[0]=(...R)=>l(e)&&l(e)(...R))},"连接")])):w("",!0),d("div",null,[d("p",null,O(l(x).text),1)])])]),default:T(()=>[d("div",k,[d("div",null,[d("button",{onClick:f[1]||(f[1]=(...R)=>l(s)&&l(s)(...R))},"读线圈"),d("button",{onClick:f[2]||(f[2]=(...R)=>l(n)&&l(n)(...R))},"读离散输入"),d("button",{onClick:f[3]||(f[3]=(...R)=>l(o)&&l(o)(...R))},"读保持寄存器"),d("button",{onClick:f[4]||(f[4]=(...R)=>l(i)&&l(i)(...R))},"读输入寄存器")]),d("div",null,[d("button",{onClick:f[5]||(f[5]=(...R)=>l(r)&&l(r)(...R))},"写单个线圈"),d("button",{onClick:f[6]||(f[6]=(...R)=>l(a)&&l(a)(...R))},"写单个保持寄存器"),d("button",{onClick:f[7]||(f[7]=(...R)=>l(_)&&l(_)(...R))},"写多个线圈"),d("button",{onClick:f[8]||(f[8]=(...R)=>l(u)&&l(u)(...R))},"写多个保持寄存器")])])]),_:1})])}}},j=p(q,[["__scopeId","data-v-dcacf8b3"]]);export{j as default};
